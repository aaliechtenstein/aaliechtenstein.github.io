<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>https://example.com/post/</link>
      <atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://example.com/post/</link>
    </image>
    
    <item>
      <title>Scientific programming</title>
      <link>https://example.com/post/scientificprogramming/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/scientificprogramming/</guid>
      <description>&lt;h2 id=&#34;languages&#34;&gt;Languages&lt;/h2&gt;
&lt;h1 id=&#34;cc&#34;&gt;C/C++&lt;/h1&gt;
&lt;p&gt;These languages often occupy the tops of various ratings — they are valued for their power and speed. C was created in the early 1970s by Dennis Ritchie, C++ was developed by Bjorn Stroustrup in 1985. Today, these two languages underlie everything from OS and games to modern scientific computing and machine learning. C and C++ are well suited for demanding applications that need low-level hardware access and performance. It takes time and some effort to master these languages.&lt;/p&gt;
&lt;h1 id=&#34;java&#34;&gt;Java&lt;/h1&gt;
&lt;p&gt;Java is a general—purpose OOP language developed in the 1990s by James Gosling at Sun (now owned by Oracle) and designed to be compiled into bytecode to run on a Java virtual machine. By 2020, these include almost all types of devices — from televisions and game consoles to servers, phones and even kitchen appliances. The language is widely used in corporations and universities, which has made it popular among both novice programmers and experienced developers.&lt;/p&gt;
&lt;h1 id=&#34;julia&#34;&gt;Julia&lt;/h1&gt;
&lt;p&gt;A modern high-level language designed for high-performance numerical processing and statistical analysis. Julia was developed in 2009 by Jeff Bezanson, Stefan Karpinski, Viral B. Shah and Alan Edelman. It is one of the four languages that allow achieving the performance of supercomputers at the petaflops level (along with C, C++ and Fortran). It is popular in universities, governments and financial institutions.&lt;/p&gt;
&lt;h1 id=&#34;python&#34;&gt;Python&lt;/h1&gt;
&lt;p&gt;Python, introduced in 1991 by Guido van Rossum, was conceived as a well-readable language with OOP functions, involving the use of functional paradigms to build clean and well-organized programs. Python is supported by large platforms and is used in a variety of fields, including science, intelligent data processing, the development of artificial intelligence systems, computer graphics for feature films, cloud computing, game development and many others. Python has proven itself well and will remain one of the most sought-after tools for a long time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome, this is a post about the past week from 08/04/2023</title>
      <link>https://example.com/post/getting-started/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/getting-started/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;libr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;основные-термины-emacs&#34;&gt;Основные термины Emacs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Определение 1.&lt;/strong&gt; Буфер — объект, представляющий какой-либо текст.
Буфер может содержать что угодно, например, результаты компиляции программы
или встроенные подсказки. Практически всё взаимодействие с пользователем, в том
числе интерактивное, происходит посредством буферов.
&lt;strong&gt;Определение 2.&lt;/strong&gt; Фрейм соответствует окну в обычном понимании этого слова. Каждый фрейм содержит область вывода и одно или несколько окон Emacs.
&lt;strong&gt;Определение 3.&lt;/strong&gt; Окно — прямоугольная область фрейма, отображающая один из буферов.
Каждое окно имеет свою строку состояния, в которой выводится следующая информация: название буфера, его основной режим, изменялся ли текст буфера и как далеко вниз по буферу расположен курсор. Каждый буфер находится только в одном из возможных основных режимов. Существующие основные режимы включают режим Fundamental (наименее специализированный), режим Text, режим Lisp, режим С, режим Texinfo и другие. Под второстепенными режимами понимается список режимов, которые включены в данный момент в буфере выбранного окна.
&lt;strong&gt;Определение 4.&lt;/strong&gt; Область вывода — одна или несколько строк внизу фрейма, в которой Emacs выводит различные сообщения, а также запрашивает подтверждения и дополнительную информацию от пользователя.
&lt;strong&gt;Определение 5.&lt;/strong&gt; Минибуфер используется для ввода дополнительной информации и всегда отображается в области вывода.
&lt;strong&gt;Определение 6.&lt;/strong&gt; Точка вставки — место вставки (удаления) данных в буфере.&lt;/p&gt;
&lt;h3 id=&#34;основы-работы-в-emacs&#34;&gt;Основы работы в Emacs&lt;/h3&gt;
&lt;p&gt;Для запуска Emacs необходимо в командной строке набрать emacs (или emacs &amp;amp; для работы в фоновом режиме относительно консоли). Для работы с Emacs можно использовать как элементы меню, так и различные сочетания клавиш. Например, для выхода из Emacs можно воспользоваться меню File и выбрать пункт Quit , а можно нажать последовательно Ctrl-x Ctrl-c (в обозначениях Emacs: C-x C-c).
Многие рутинные операции в Emacs удобнее производить с помощью клавиатуры, а не графического меню. Наиболее часто в командах Emacs используются сочетания c клавишами Ctrl и Meta (в обозначениях Emacs: C- и M-; клавиша Shift в Emasc обозначается как S-). Так как на клавиатуреS для IBM PC совместимых ПК клавиши Meta нет, то вместо неё можно использовать Alt или Esc . Для доступа к системе меню используйте клавишу F10 .
Клавиши Ctrl , Meta и Shift принято называть префиксными. Например, запись M-x означает, что надо удерживая клавишу Meta (или Alt ), нажать на клавишу x. Для открытия файла следует использовать команду C-x C-f (надо, удерживая клавишу Ctrl , нажать на клавишу x , затем отпустить обе клавиши и снова, удерживая клавишу Ctrl , нажать на клавишу f ).
По назначению префиксные сочетания клавиш различаются следующим образом:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C-x — префикс ввода основных команд редактора (например, открытия, закрытии,
сохранения файла и т.д.);&lt;/li&gt;
&lt;li&gt;C-c — префикс вызова функций, зависящих от используемого режима.
&lt;strong&gt;Определение 7.&lt;/strong&gt; Режим — пакет расширений, изменяющий поведение буфера Emacs при редактировании и просмотре текста (например, для редактирования исходного текста программ на языках С или Perl).&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Welcome, this is a post about the past week from 12/05/2023</title>
      <link>https://example.com/post/week5/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/week5/</guid>
      <description>&lt;h2 id=&#34;application-development-stages&#34;&gt;Application Development stages&lt;/h2&gt;
&lt;p&gt;The software development process is usually divided into the following
stages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;planning, which includes the collection and analysis of requirements for the functionality and other characteristics of the application being developed;&lt;/li&gt;
&lt;li&gt;design, which includes the development of basic algorithms and specifications,
the definition of a programming language;&lt;/li&gt;
&lt;li&gt;direct application development:&lt;/li&gt;
&lt;li&gt;coding — in fact, the creation of the source code of the program (possible
in several versions);&lt;/li&gt;
&lt;li&gt;analysis of the developed code;&lt;/li&gt;
&lt;li&gt;build, compile and develop an executable module;&lt;/li&gt;
&lt;li&gt;testing and debugging, saving the changes made;&lt;/li&gt;
&lt;li&gt;documentation.
To create the source code of the program, the developer can use any
text editor convenient for him: vi, vim, mcedit, emacs, geany, etc.
After you finish writing the source code of the program (possibly consisting of
several files), you need to compile it and get an executable module.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Welcome, this is a post about the past week from 29/04/2023</title>
      <link>https://example.com/post/week4/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/week4/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;libr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-sequence-of-work&#34;&gt;The sequence of work&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Write a batch file implementing a simplified semaphore mechanism. The command file must wait for some time t1
for the resource to be released, giving a message about it, and after waiting for its release, use
it for some time t2&amp;lt;&amp;gt;t1, also giving information that
the resource is being used by the corresponding command file (process). Run
a batch file in one virtual terminal in the background, redirecting
its output to another (&amp;gt; /dev/tty#, where # is the number of the terminal to which it is redirected
output), in which this file is also running, but not in the background, but in privileged
mode. Modify the program so that there is a possibility of interaction of three
or more processes.&lt;/li&gt;
&lt;li&gt;Implement the man command using a batch file. Examine the contents of the kata log /usr/share/man/man1. It contains archives of text files containing
help for most of the programs and commands installed in the system. Each archive
can be opened with the less command immediately after viewing the contents of the help. The command
file should receive the command name as a command line argument and as
the result is to issue a help about this command or a message about the absence of help
if the corresponding file is not in the man1 directory.&lt;/li&gt;
&lt;li&gt;Using the built-in variable $RANDOM, write a command file that generates a random sequence of letters of the Latin alphabet. Note that $RANDOM
outputs pseudo-random numbers in the range from 0 to 32767.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>LaTeX</title>
      <link>https://example.com/post/writing-technical-content/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/writing-technical-content/</guid>
      <description>&lt;h2 id=&#34;what-is-latex&#34;&gt;What is LaTeX?&lt;/h2&gt;
&lt;p&gt;LaTEX (pronounced &amp;ldquo;latech&amp;rdquo; or &amp;ldquo;latech&amp;rdquo;) is a tool for creating professional documents. It is based on the WYSIWYM editing paradigm (what I see is what I mean), that is, the user is required to focus only on the contents of the document, leaving its formatting to the program. Instead of manually distributing the text on the page, as is done in Microsoft Word or LibreOffice Writer, you can simply enter it, allowing LaTeX to do the rest.&lt;/p&gt;
&lt;h2 id=&#34;why-do-i-need-latex&#34;&gt;Why do I need LaTeX?&lt;/h2&gt;
&lt;p&gt;This tool is used everywhere to create scientific documents, write books, as well as many other forms of publications. It allows not only to create beautifully designed documents, but also gives users the opportunity to quickly implement such complex elements of a printed set as mathematical expressions, tables, references and bibliographies, obtaining consistent markup across all sections.&lt;/p&gt;
&lt;p&gt;Thanks to the availability of a large number of open libraries (more on that later), the possibilities of LaTEX become almost limitless. These libraries expand the capabilities of users even more, allowing you to add footnotes, draw diagrams, etc.&lt;/p&gt;
&lt;p&gt;One of the most compelling reasons why many people use LaTeX is to separate the content of a document from its style. This means that after writing the content, you can easily change its appearance. Similarly, you can create one document style and use it to standardize the appearance of others.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Report making</title>
      <link>https://example.com/post/report-making/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/report-making/</guid>
      <description>&lt;h2 id=&#34;the-purpose-of-the-work&#34;&gt;The purpose of the work&lt;/h2&gt;
&lt;p&gt;Here is the formulation of the purpose of the laboratory work.
The goal statements for each laboratory work are given in
the guidelines.&lt;/p&gt;
&lt;p&gt;The purpose of this template is to simplify the preparation of reports on
laboratory work as much as possible.  By modifying this template, students will be able
to easily prepare a report on laboratory work, as well as get acquainted
with the basic features of Markdown markup.&lt;/p&gt;
&lt;h2 id=&#34;task&#34;&gt;Task&lt;/h2&gt;
&lt;p&gt;Here is a description of the task in accordance with the recommendations
of the methodological manual and the issued version.&lt;/p&gt;
&lt;h2 id=&#34;theoretical-introduction&#34;&gt;Theoretical introduction&lt;/h2&gt;
&lt;p&gt;Here the theoretical aspects related to the performance of the work are described.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;For example, Table @tbl:std-dir provides a brief description of standard Unix directories.&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Description of some directories of the GNU Linux file system {#tbl:std-dir}&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Directory name&lt;/th&gt;
&lt;th&gt;Catalog description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Root directory containing the entire file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bin &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Basic system utilities required both in single-user mode and during normal operation for all users&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/etc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;System-wide configuration files and configuration files of installed programs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/home&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Contains users&amp;rsquo; home directories, which, in turn, contain personal settings and user data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/media&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mounting points for removable media&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/root&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The home directory of the user &lt;code&gt;root&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/tmp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Temporary files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/usr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Secondary hierarchy for user data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For more information about Unix, see [@gnu-doc:bash;@newham:2005:bash;@zarrelli:2017:bash;@robbins:2013:bash;@tannenbaum:arch-pc:ru;@tannenbaum:modern-os:ru].&lt;/p&gt;
&lt;h2 id=&#34;performing-laboratory-work&#34;&gt;Performing laboratory work&lt;/h2&gt;
&lt;p&gt;The actions performed are described, a link to the illustration is given as an illustration&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The results of the work done are briefly described here.&lt;/p&gt;
&lt;h2 class=&#34;unnumbered&#34; id=&#34;references&#34;&gt;References&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
